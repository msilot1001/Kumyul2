import{REST}from"@discordjs/rest";import{Routes}from"discord-api-types/v10";import*as dotenv from"dotenv";import CommandBundle from"./Commands/CommandBundle.js";import logger from"./Utils/Logger.js";dotenv.config();const commandArray=new Array;if(CommandBundle.forEach(o=>{commandArray.push(o.Builder)}),void 0!==process.env.TESTTOKEN&&void 0!==process.env.CLIENTID){logger.info(`TOKEN: ${process.env.TESTTOKEN}, CLIENTID: `+process.env.CLIENTID);const b=new REST({version:"10"}).setToken(process.env.TESTTOKEN);b.put(Routes.applicationCommands(process.env.CLIENTID),{body:commandArray}).then(()=>logger.info("Successfully registered application commands. : "+commandArray)).catch(o=>logger.error(o))}else logger.error("Env Value undefined");
var __awaiter=this&&this.__awaiter||function(o,r,v,d){return new(v=v||Promise)(function(n,t){function e(o){try{a(d.next(o))}catch(o){t(o)}}function i(o){try{a(d.throw(o))}catch(o){t(o)}}function a(o){var t;o.done?n(o.value):((t=o.value)instanceof v?t:new v(function(o){o(t)})).then(e,i)}a((d=d.apply(o,r||[])).next())})};import*as dotenv from"dotenv";import*as BotEvent from"./BotEvent/BotEvent.js";import{LoadConfig}from"./Config/ConfigManager.js";import{Connect}from"./Database/DBManager.js";import GuildAdd from"./BotEvent/GuildAdd.js";dotenv.config(),LoadConfig().then(()=>__awaiter(void 0,void 0,void 0,function*(){yield Connect();var o=BotEvent.client;o.once("ready",()=>BotEvent.Start()),o.on("messageCreate",o=>__awaiter(void 0,void 0,void 0,function*(){BotEvent.MsgRecv(o)})),o.on("interactionCreate",o=>__awaiter(void 0,void 0,void 0,function*(){BotEvent.InterAcRecv(o)})),o.on("guildCreate",o=>__awaiter(void 0,void 0,void 0,function*(){GuildAdd(o)})),o.login("production"===process.env.NODE_ENV?process.env.TOKEN:process.env.TESTTOKEN)}));
var __awaiter=this&&this.__awaiter||function(t,o,a,s){return new(a=a||Promise)(function(n,e){function i(t){try{c(s.next(t))}catch(t){e(t)}}function r(t){try{c(s.throw(t))}catch(t){e(t)}}function c(t){var e;t.done?n(t.value):((e=t.value)instanceof a?e:new a(function(t){t(e)})).then(i,r)}c((s=s.apply(t,o||[])).next())})};import{Client,GatewayIntentBits,Partials,ActivityType}from"discord.js";import logger from"../Utils/Logger.js";import InterAcRecvFunc from"./InterAcRecv.js";import MsgRecvFunc from"./MsgRecv.js";const client=new Client({intents:[GatewayIntentBits.Guilds,GatewayIntentBits.GuildMessages],partials:[Partials.Channel]});function Start(){var t;return __awaiter(this,void 0,void 0,function*(){logger.info(`
${null==(t=client.user)?void 0:t.tag} (검열봇 시덱이) 이 준비되었습니다!`);let e=client.ws.ping,n=void logger.info(`현재 연결된 클라이언트의 핑은 ${e}ms 입니다.`);setInterval(()=>{var t;e=client.ws.ping,n=[{name:"욕설",type:ActivityType.Listening},{name:"닝겐들 명령",type:ActivityType.Listening},{name:"너님의 명령",type:ActivityType.Listening},{name:"욕설을 검열",type:ActivityType.Listening},{name:"시덱인 귀여웡 이라고",type:ActivityType.Listening},{name:"당신네 서버에서 검열놀이",type:ActivityType.Listening},{name:""+client.guilds.cache.size,type:ActivityType.Playing},{name:client.guilds.cache.reduce((t,e)=>t+e.memberCount,0)+"명의 닝겐들과 함께",type:ActivityType.Playing}],null!=(t=client.user)&&t.setActivity(n[Math.floor(Math.random()*n.length)])},5e3)})}function MsgRecv(t){return __awaiter(this,void 0,void 0,function*(){MsgRecvFunc(t)})}function InterAcRecv(t){return __awaiter(this,void 0,void 0,function*(){InterAcRecvFunc(t)})}function ErrorInMsgProcess(t,e){return __awaiter(this,void 0,void 0,function*(){t.reply(`Error Occured While Progress 
 Error: `+e)})}export{client,Start,MsgRecv,InterAcRecv,ErrorInMsgProcess};
import{ChannelType}from"discord.js";import{embedtemp}from"../Config/EmbedConfig.js";import{GuildModel}from"../Database/GuildSchema.js";import logger from"../Utils/Logger.js";export default function GuildAdd(o){o.available&&o.channels.fetch().then(e=>{if(0!==e.size){let t=!1;e.forEach(e=>{var i;t||e.type===ChannelType.GuildText&&((i=embedtemp).setTitle("시덱이를 초대해주셔서 감사합니다!").setDescription("No.1 관리봇 시덱이!").setFields({name:"시덱이 기능",value:"/기능 을 통해 기능을 확인해보세요!"},{name:"도움말",value:"[도움말](https://sojakstudio.github.io/kumyul/help) 을 확인해보세요!"},{name:"행복한 시덱이 라이프 되세요!",value:"[디스코드 공식 서버](https://discord.gg/RGYnR3r5XC), [깃허브 이슈](https://github.com/sojakstudio/Kumyul2/issues)"}),e.send({embeds:[i]}),GuildModel.findOne({id:o.id}).exec().then(e=>{logger.info(e),null===e&&GuildModel.create({id:o.id,warnlimit:10,customdetection:"{}"})}),t=!0)})}})}
var __awaiter=this&&this.__awaiter||function(e,s,d,a){return new(d=d||Promise)(function(n,t){function o(e){try{i(a.next(e))}catch(e){t(e)}}function r(e){try{i(a.throw(e))}catch(e){t(e)}}function i(e){var t;e.done?n(e.value):((t=e.value)instanceof d?t:new d(function(e){e(t)})).then(o,r)}i((a=a.apply(e,s||[])).next())})};import{EmbedBuilder,ActionRowBuilder,ButtonBuilder,ButtonStyle}from"discord.js";import{url}from"../Config/EmbedConfig.js";import{VoteModel}from"../Database/VoteSchema.js";import logger from"../Utils/Logger.js";function InterAcButton(s){var d,a;return __awaiter(this,void 0,void 0,function*(){if(s.customId.startsWith("cdvo.")){var[e,n]=s.customId.substring(5).split("_");try{var o=yield VoteModel.findOne({id:e});if(o){let t;var r;const i=(new ActionRowBuilder).addComponents((new ButtonBuilder).setCustomId(`cdvo.${e}_agree`).setLabel("👍").setStyle(ButtonStyle.Success),(new ButtonBuilder).setCustomId(`cdvo.${e}_disagree`).setLabel("👎").setStyle(ButtonStyle.Danger),(new ButtonBuilder).setCustomId(`cdvo.${e}_lock`).setLabel("🔒").setStyle(ButtonStyle.Secondary));if("lock"===n)return o.maker!==s.user.id?void s.reply({content:"투표의 생성자만 투표를 종료할 수 있어요!",ephemeral:!0}):(yield VoteModel.deleteOne({id:e}),t=(new EmbedBuilder).setColor("#5f7b9b").setAuthor({name:"시덱이",iconURL:url}).setTitle("[종료됨] "+o.topic).setDescription(o.description||"새 투표에요!").addFields({name:"찬성",value:""+o.agree,inline:!0},{name:"반대",value:""+o.disagree,inline:!0}).setFooter({text:o.makername+"님이 시작했어요!"}),null!=(d=s.channel)&&d.messages.fetch(o.msgid).then(e=>{e.edit({embeds:[t],components:[]})}),void s.reply({content:"성공적으로 투표를 반영했어요!",ephemeral:!0}));o.uservoted.has(s.user.id)&&((r=o.uservoted.get(s.user.id))&&--o.agree,r||--o.disagree),"agree"===n&&(o.agree+=1,o.save(),o.uservoted.set(s.user.id,!0)),"disagree"===n&&(o.disagree+=1,o.save(),o.uservoted.set(s.user.id,!1)),t=(new EmbedBuilder).setColor("#46b950").setAuthor({name:"시덱이",iconURL:url}).setTitle(o.topic).setDescription(o.description||"새 투표에요!").addFields({name:"찬성",value:""+o.agree,inline:!0},{name:"반대",value:""+o.disagree,inline:!0}).setFooter({text:o.makername+"님이 시작했어요!"}),null!=(a=s.channel)&&a.messages.fetch(o.msgid).then(e=>{e.edit({embeds:[t],components:[i]})}),s.reply({content:"성공적으로 투표를 반영했어요!",ephemeral:!0})}}catch(e){logger.error(e)}}})}export default InterAcButton;
var __awaiter=this&&this.__awaiter||function(n,r,m,u){return new(m=m||Promise)(function(e,t){function a(n){try{i(u.next(n))}catch(n){t(n)}}function o(n){try{i(u.throw(n))}catch(n){t(n)}}function i(n){var t;n.done?e(n.value):((t=n.value)instanceof m?t:new m(function(n){n(t)})).then(a,o)}i((u=u.apply(n,r||[])).next())})};import CommandBundle from"../Commands/CommandBundle.js";function InterAcCommand(t){return __awaiter(this,void 0,void 0,function*(){var n=CommandBundle.find(n=>n.Builder.name===t.commandName);n&&n.SlashExecute(t)})}export default InterAcCommand;
var __awaiter=this&&this.__awaiter||function(t,i,a,u){return new(a=a||Promise)(function(e,n){function o(t){try{c(u.next(t))}catch(t){n(t)}}function r(t){try{c(u.throw(t))}catch(t){n(t)}}function c(t){var n;t.done?e(t.value):((n=t.value)instanceof a?n:new a(function(t){t(n)})).then(o,r)}c((u=u.apply(t,i||[])).next())})};import InterAcCommand from"./InterAcCommand.js";import InterAcButton from"./InterAcButton.js";function InterAcRecv(t){return __awaiter(this,void 0,void 0,function*(){t.isCommand()&&InterAcCommand(t),t.isButton()&&InterAcButton(t)})}export default InterAcRecv;
var __awaiter=this&&this.__awaiter||function(e,a,s,m){return new(s=s||Promise)(function(t,n){function o(e){try{r(m.next(e))}catch(e){n(e)}}function i(e){try{r(m.throw(e))}catch(e){n(e)}}function r(e){var n;e.done?t(e.value):((n=e.value)instanceof s?n:new s(function(e){e(n)})).then(o,i)}r((m=m.apply(e,a||[])).next())})};import logger from"../Utils/Logger.js";import{GetConfig}from"../Config/ConfigManager.js";import CommandBundle from"../Commands/CommandBundle.js";import Parse from"../Debug/CommandParser.js";const prefix="ㅁ";function MsgRecv(t){var o;return __awaiter(this,void 0,void 0,function*(){if(!t.author.bot&&(logger.info(`[ ${null==(o=t.guild)?void 0:o.name} ] ${null==(o=t.member)?void 0:o.user.username}#${null==(o=t.member)?void 0:o.user.discriminator} : `+t.content),t.content.startsWith(">cdec")||Parse(t,t.content.substring(0,4).trim().split("")),t.content.startsWith(prefix))){var e=t.content.slice(prefix.length).split(/ +/);if(e){const n=null==(o=e.shift())?void 0:o.toLowerCase();logger.info("Command Detected: "+n),CommandBundle.forEach(e=>__awaiter(this,void 0,void 0,function*(){logger.info(e.Builder.name),e.Builder.name===n&&((yield GetConfig(1))||t.reply("봇 서버 관리자가 메세지커맨드를 비활성화했어요! 봇 서버관리자에게 문의해주세요!"),e.MsgExecute(t))}))}}})}export default MsgRecv;
var __awaiter=this&&this.__awaiter||function(e,r,c,u){return new(c=c||Promise)(function(o,t){function n(e){try{a(u.next(e))}catch(e){t(e)}}function i(e){try{a(u.throw(e))}catch(e){t(e)}}function a(e){var t;e.done?o(e.value):((t=e.value)instanceof c?t:new c(function(e){e(t)})).then(n,i)}a((u=u.apply(e,r||[])).next())})};import{SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";const command={Builder:(new SlashCommandBuilder).setName("공지").setDescription("공지 채널에 공지를 보내요!"),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("SlashExecute")})};export default command;
var __awaiter=this&&this.__awaiter||function(e,o,s,d){return new(s=s||Promise)(function(i,t){function n(e){try{a(d.next(e))}catch(e){t(e)}}function r(e){try{a(d.throw(e))}catch(e){t(e)}}function a(e){var t;e.done?i(e.value):((t=e.value)instanceof s?t:new s(function(e){e(t)})).then(n,r)}a((d=d.apply(e,o||[])).next())})};import{EmbedBuilder,SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";const command={Builder:(new SlashCommandBuilder).setName("차단").setDescription("사용자를 차단합니다. (기본량: 차단해제 X)").addUserOption(e=>e.setName("사용자").setDescription("차단할 사용자").setRequired(!0)).addIntegerOption(e=>e.setName("삭제메세지").setDescription("삭제할 유저의 메세지 기록").setRequired(!0).addChoices({name:"삭제하기 않기",value:0},{name:"최근 24시간",value:1},{name:"최근 7일",value:7})).addStringOption(e=>e.setName("사유").setDescription("유저를 차단할 사유")),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:r=>__awaiter(void 0,void 0,void 0,function*(){var e;if(r.guild&&r.member)if((null==(t=r.member)?void 0:t.permissions).toArray().includes("BanMembers")){var t=r.options.getUser("사용자");logger.info(t);const i=r.options.getString("사유"),n=r.options.getInteger("메세지 삭제");null!=(e=r.guild)&&e.members.fetch({user:t}).then(t=>{(i?t.ban({deleteMessageDays:n,reason:i}).then(()=>__awaiter(void 0,void 0,void 0,function*(){var e=(new EmbedBuilder).setColor("#CB7ACF").setTitle(`${t.user.username}#${t.user.discriminator}님을 차단했습니다`).setDescription("유저가 차단되었습니다.").addFields([{name:"사유",value:`\`\`\`${i}\`\`\``},{name:"메세지 삭제 기한",value:""+n}]).setTimestamp();yield r.reply({embeds:[e]})})):t.ban({deleteMessageDays:n}).then(()=>__awaiter(void 0,void 0,void 0,function*(){var e=(new EmbedBuilder).setColor("#CB7ACF").setTitle(`${t.user.username}#${t.user.discriminator}님을 차단했습니다`).setDescription("유저가 차단되었습니다.").addFields([{name:"메세지 삭제 기한",value:""+n}]).setTimestamp();yield r.reply({embeds:[e]})}))).catch(()=>{r.reply({content:"실행중에 에러가 발생했어요!",ephemeral:!0})})}).catch(e=>{r.reply({content:"Unvaild User Provided, Error: "+e,ephemeral:!0})})}else r.reply({content:"이 명령어를 실행하려면 멤버 차단하기 권한이 필요해요!",ephemeral:!0})})};export default command;
import Ban from"./Ban.js";import Help from"./Help.js";import Kick from"./Kick.js";import LimitCheck from"./LimitCheck.js";import LimitSet from"./LimitSet.js";import Vote from"./Vote.js";import WarnAdd from"./WarnAdd.js";import WarnCheck from"./WarnCheck.js";import WarnRemove from"./WarnRemove.js";import WarnReset from"./WarnReset.js";import WarnSet from"./WarnSet.js";import ServerConfig from"./ServerConfig.js";const CommandBundle=[Ban,Help,Kick,LimitCheck,LimitSet,Vote,WarnAdd,WarnCheck,WarnRemove,WarnReset,WarnSet,ServerConfig];export default CommandBundle;
var __awaiter=this&&this.__awaiter||function(e,r,c,u){return new(c=c||Promise)(function(t,o){function n(e){try{a(u.next(e))}catch(e){o(e)}}function i(e){try{a(u.throw(e))}catch(e){o(e)}}function a(e){var o;e.done?t(e.value):((o=e.value)instanceof c?o:new c(function(e){e(o)})).then(n,i)}a((u=u.apply(e,r||[])).next())})};import{SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";const command={Builder:(new SlashCommandBuilder).setName("도움말").setDescription("명령어에 대한 도움말을 출력합니다."),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("SlashExecute"),e.reply("Help Command")})};export default command;
var __awaiter=this&&this.__awaiter||function(e,s,a,d){return new(a=a||Promise)(function(t,i){function r(e){try{o(d.next(e))}catch(e){i(e)}}function n(e){try{o(d.throw(e))}catch(e){i(e)}}function o(e){var i;e.done?t(e.value):((i=e.value)instanceof a?i:new a(function(e){e(i)})).then(r,n)}o((d=d.apply(e,s||[])).next())})};import{EmbedBuilder,SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";const command={Builder:(new SlashCommandBuilder).setName("추방").setDescription("사용자를 추방합니다.").addUserOption(e=>e.setName("사용자").setDescription("추방할 사용자").setRequired(!0)).addStringOption(e=>e.setName("사유").setDescription("유저를 추방할 사유")),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:r=>__awaiter(void 0,void 0,void 0,function*(){var e;if((null==(i=r.member)?void 0:i.permissions).toArray().includes("KickMembers")){var i=yield r.options.getUser("사용자");const t=yield r.options.getString("사유");null!=(e=r.guild)&&e.members.fetch(i.id).then(i=>__awaiter(void 0,void 0,void 0,function*(){(null===t?i.kick().then(()=>__awaiter(void 0,void 0,void 0,function*(){var e=(new EmbedBuilder).setColor("#CB7ACF").setTitle(`${i.user.username}#${i.user.discriminator}님을 추방했습니다`).setDescription("유저가 추방되었습니다.").addFields([{name:"사유",value:"없읍"}]).setTimestamp();yield r.reply({embeds:[e]})})):i.kick().then(()=>__awaiter(void 0,void 0,void 0,function*(){var e=(new EmbedBuilder).setColor("#CB7ACF").setTitle(`${i.user.username}#${i.user.discriminator}님을 추방했습니다`).setDescription("유저가 추방되었습니다.").addFields([{name:"사유",value:`\`\`\`${t}\`\`\``}]).setTimestamp();yield r.reply({embeds:[e]})}))).catch(()=>{r.reply({content:"실행중에 에러가 발생했어요! 저런...",ephemeral:!0})})})).catch(e=>{r.reply({content:"Unvaild User Provided, Error: "+e,ephemeral:!0})})}else r.reply({content:"이 명령어를 실행하려면 멤버 추방하기 권한이 필요해요!",ephemeral:!0})})};export default command;
var __awaiter=this&&this.__awaiter||function(e,a,l,d){return new(l=l||Promise)(function(i,t){function n(e){try{r(d.next(e))}catch(e){t(e)}}function o(e){try{r(d.throw(e))}catch(e){t(e)}}function r(e){var t;e.done?i(e.value):((t=e.value)instanceof l?t:new l(function(e){e(t)})).then(n,o)}r((d=d.apply(e,a||[])).next())})};import{SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";import{GuildModel}from"../Database/GuildSchema.js";const command={Builder:(new SlashCommandBuilder).setName("한도확인").setDescription("이 서버의 경고한도를 출력합니다."),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:t=>__awaiter(void 0,void 0,void 0,function*(){t.guild||t.reply({content:"어허 길드 안에서만 이 커맨드를 쓸 수 있답니다! 친구!",ephemeral:!0});try{logger.info("find");var e=yield GuildModel.findOne({id:t.guild.id});e?t.reply(`이 서버의 한도는 ${e.warnlimit}이에요!`):t.reply({content:"이 길드는 시덱이 서비스에 등록되어있지 않아요! 관리자에게 요청해보세요!",ephemeral:!0})}catch(e){t.reply({content:"처리중에 오류가 발생했어요! 다시 시도해주세요!",ephemeral:!0})}})};export default command;
var __awaiter=this&&this.__awaiter||function(e,l,d,a){return new(d=d||Promise)(function(t,i){function n(e){try{r(a.next(e))}catch(e){i(e)}}function o(e){try{r(a.throw(e))}catch(e){i(e)}}function r(e){var i;e.done?t(e.value):((i=e.value)instanceof d?i:new d(function(e){e(i)})).then(n,o)}r((a=a.apply(e,l||[])).next())})};import{SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";import{GuildModel}from"../Database/GuildSchema.js";const command={Builder:(new SlashCommandBuilder).setName("한도설정").setDescription("이 서버의 한도를 지정합니다.").addIntegerOption(e=>e.setName("한도").setDescription("이 서버의 바꿀 경고 한도").setRequired(!0)),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:o=>__awaiter(void 0,void 0,void 0,function*(){var e,i,t,n=o.options.getInteger("한도");if(n<=0)o.reply({content:"경고 한도를 0 이하로 설정할 수 없어요! 경고기능을 비활성화하려면 /서버설정 명령어를 사용해주세요!",ephemeral:!0});else if(o.guild)if((null==(e=o.member)?void 0:e.permissions).toArray().includes("ManageGuild"))try{(yield GuildModel.findOne({id:null==(i=o.guild)?void 0:i.id}))?(yield GuildModel.updateOne({id:null==(t=o.guild)?void 0:t.id},{warnlimit:n}),o.reply("성공적으로 한도를 변경하였습니다!, 변경된 한도: "+n)):o.reply({content:"이 길드는 시덱이 서비스에 등록되어있지 않아요! 관리자에게 요청해보세요!",ephemeral:!0})}catch(e){logger.error(e)}else o.reply({content:"이 명령어를 실행하려면 서버 관리 기능이 필요해요!",ephemeral:!0})})};export default command;
var __awaiter=this&&this.__awaiter||function(e,r,l,a){return new(l=l||Promise)(function(o,t){function n(e){try{s(a.next(e))}catch(e){t(e)}}function i(e){try{s(a.throw(e))}catch(e){t(e)}}function s(e){var t;e.done?o(e.value):((t=e.value)instanceof l?t:new l(function(e){e(t)})).then(n,i)}s((a=a.apply(e,r||[])).next())})};import{SlashCommandBuilder,ButtonStyle,ComponentType,ActionRowBuilder,ButtonBuilder,EmbedBuilder}from"discord.js";import{v1}from"uuid";import logger from"../Utils/Logger.js";import{color,url}from"../Config/EmbedConfig.js";import{GuildModel}from"../Database/GuildSchema.js";import MainPage from"../ConfigAssets/MainPage.js";import OrdinaryPage from"../ConfigAssets/OrdinaryPage.js";import InOutPage from"../ConfigAssets/InOutPage.js";import BotAutoRoleConfig from"../ConfigAssets/BotAutoRoleConfig.js";import InMsgConfig from"../ConfigAssets/InMsgConfig.js";import UserAutoRoleConfig from"../ConfigAssets/UserAutoRoleConfig.js";import SysChConfig from"../ConfigAssets/SysChConfig.js";import OutMsgConfig from"../ConfigAssets/OutMsgConfig.js";const PageTemplate=(e,t)=>{return{name:"main",embed:(new EmbedBuilder).setColor(color).setAuthor({name:"시덱이",iconURL:url}).setTitle(e.guild.name+"의 서버 설정").setDescription("바꾸고 싶은 설정 창을 열어주세요.").addFields({name:"일반 설정",value:"기본적인 관리 설정"},{name:"입/퇴장 설정",value:"입/퇴장 메세지 설정"},{name:"경고 설정",value:"경고 관련 설정"},{name:"공지 설정",value:"공지 관련 설정"},{name:"레벨링 설정",value:"레벨링 시스템 설정"},{name:"티켓 설정",value:"티켓 관련 설정"},{name:"멤버 설정",value:"멤버 관리 설정"}),components:[(new ActionRowBuilder).addComponents((new ButtonBuilder).setLabel("일반 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.ordinary`),(new ButtonBuilder).setLabel("입/퇴장 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.inout`),(new ButtonBuilder).setLabel("경고 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.warn`),(new ButtonBuilder).setLabel("공지 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.notice`),(new ButtonBuilder).setLabel("레벨링 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.level`)),(new ActionRowBuilder).addComponents((new ButtonBuilder).setLabel("티켓 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.ticket`),(new ButtonBuilder).setLabel("멤버 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.member`))]}},PageList=new Map,ExecuteList=(PageList.set("main",MainPage),PageList.set("ordinary",OrdinaryPage),PageList.set("inout",InOutPage),new Map),command=(ExecuteList.set("syschconfig",SysChConfig),ExecuteList.set("userroleconfig",UserAutoRoleConfig),ExecuteList.set("botroleconfig",BotAutoRoleConfig),ExecuteList.set("inmsgconfig",InMsgConfig),ExecuteList.set("outmsgconfig",OutMsgConfig),{Builder:(new SlashCommandBuilder).setName("서버설정").setDescription("서버의 설정을 변경합니다."),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:t=>__awaiter(void 0,void 0,void 0,function*(){const i=t.channel;var e=t.guild;if(e&&i){const s=v1();if(logger.info(s),yield GuildModel.findOne({id:e.id})){e=PageList.get("main");let n;e&&(n=yield t.reply({embeds:[(yield e(t,s)).embed],components:(yield e(t,s)).components,fetchReply:!0}));const r=`cdec.${s}.config.`;t.channel.createMessageComponentCollector({filter:e=>e.customId.startsWith(r)&&e.user.id===t.user.id,componentType:ComponentType.Button}).on("collect",o=>__awaiter(void 0,void 0,void 0,function*(){var e,t=o.customId.substring(r.length);logger.info(t),t.startsWith("execute")?(e=t.substring(8),ExecuteList.has(e)?(e=ExecuteList.get(e))&&(n&&(yield n.delete()),e=yield e(o,s),logger.info("send execute end page"),n=yield i.send({embeds:[(yield e(o,s)).embed],components:(yield e(o,s)).components})):logger.info("Page Not Found 404")):(e=PageList.get(t))?(n&&(yield n.delete()),logger.info("send return page"),n=yield o.reply({embeds:[(yield e(o,s)).embed],components:(yield e(o,s)).components,fetchReply:!0})):logger.info("Page Not Found 404")}))}else t.reply({content:"이 길드는 시덱이 서비스에 등록되어있지 않아요! 관리자에게 요청해보세요!",ephemeral:!0})}})});export default command;export{PageList,ExecuteList};
var __awaiter=this&&this.__awaiter||function(e,s,a,d){return new(a=a||Promise)(function(o,t){function i(e){try{r(d.next(e))}catch(e){t(e)}}function n(e){try{r(d.throw(e))}catch(e){t(e)}}function r(e){var t;e.done?o(e.value):((t=e.value)instanceof a?t:new a(function(e){e(t)})).then(i,n)}r((d=d.apply(e,s||[])).next())})};import{ActionRowBuilder,ButtonBuilder,EmbedBuilder,SlashCommandBuilder,ButtonStyle}from"discord.js";import{v4}from"uuid";import logger from"../Utils/Logger.js";import{VoteModel}from"../Database/VoteSchema.js";import{url}from"../Config/EmbedConfig.js";const command={Builder:(new SlashCommandBuilder).setName("투표").setDescription("찬반투표를 개설합니다.").addStringOption(e=>e.setName("주제").setDescription("투표의 주제").setRequired(!0)).addStringOption(e=>e.setName("설명").setDescription("투표의 설명")),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:s=>__awaiter(void 0,void 0,void 0,function*(){if(s.guild&&s.member){var e=s.options.getString("주제"),t=s.options.getString("설명");if(e)if((null==(o=s.member)?void 0:o.permissions).toArray().includes("ManageGuild")){var o=""+v4();try{var i=(new EmbedBuilder).setColor("#46b950").setAuthor({name:"시덱이",iconURL:url}).setTitle(e).setDescription(t||"새 투표에요!").addFields({name:"찬성",value:"0",inline:!0},{name:"반대",value:"0",inline:!0}).setFooter({text:`${s.user.username}#${s.user.discriminator}님이 시작했어요!`}),n=(new ActionRowBuilder).addComponents((new ButtonBuilder).setCustomId(`cdvo.${o}_agree`).setLabel("👍").setStyle(ButtonStyle.Success),(new ButtonBuilder).setCustomId(`cdvo.${o}_disagree`).setLabel("👎").setStyle(ButtonStyle.Danger),(new ButtonBuilder).setCustomId(`cdvo.${o}_lock`).setLabel("🔒").setStyle(ButtonStyle.Secondary)),r=yield s.channel.send({embeds:[i],components:[n]});yield VoteModel.create({id:o,topic:e,msgid:r.id,description:t||null,agree:0,disagree:0,uservoted:new Map,maker:s.user.id,makername:s.user.username+"#"+s.user.discriminator}),s.reply({content:"성공적으로 투표를 생성했어요!",ephemeral:!0})}catch(e){logger.error(e)}}else s.reply({content:"이 명령어를 실행하려면 서버 관리하기 권한이 필요해요!",ephemeral:!0})}})};export default command;
var __awaiter=this&&this.__awaiter||function(e,d,a,s){return new(a=a||Promise)(function(t,i){function r(e){try{o(s.next(e))}catch(e){i(e)}}function n(e){try{o(s.throw(e))}catch(e){i(e)}}function o(e){var i;e.done?t(e.value):((i=e.value)instanceof a?i:new a(function(e){e(i)})).then(r,n)}o((s=s.apply(e,d||[])).next())})};import{SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";import{GuildModel}from"../Database/GuildSchema.js";import{embedtemp}from"../Config/EmbedConfig.js";const command={Builder:(new SlashCommandBuilder).setName("경고").setDescription("사용자에게 경고를 부여합니다. (기본량: 1)").addUserOption(e=>e.setName("유저").setDescription("경고를 부여할 유저").setRequired(!0)).addIntegerOption(e=>e.setName("경고수").setDescription("추가할 경고수")),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:s=>__awaiter(void 0,void 0,void 0,function*(){var e,t=s.options.getUser("유저"),r=s.options.getInteger("경고수");if(t||s.reply({content:"경고를 부여할 유저를 지정해주세요!",ephemeral:!0}),s.guild)if((null==(e=s.member)?void 0:e.permissions).toArray().includes("BanMembers"))try{var n=yield GuildModel.findOne({id:s.guild.id});if(n){var o=JSON.parse(n.userwarns);let i=!1;for(let e=0;e<o.length;e++)o[e].id===t.id&&(i=!0,o[e].warn+=r||1);i||o.push({id:t.id,warn:r||1});var d=JSON.stringify(o),a=(yield GuildModel.updateOne({id:s.guild.id},{userwarns:d}),embedtemp.setTitle("✅ 경고가 부여됨").setDescription(`<@${t.id}>에게 ${r||1}만큼의 경고를 부여함`));s.reply({embeds:[a]})}else s.reply({content:"이 길드는 시덱이 서비스에 등록되어있지 않아요! 관리자에게 요청해보세요!",ephemeral:!0})}catch(e){logger.error(e)}else s.reply({content:"이 명령어를 실행하려면 멤버 차단하기/추방하기 권한이 필요해요!",ephemeral:!0})})};export default command;
var __awaiter=this&&this.__awaiter||function(e,a,d,s){return new(d=d||Promise)(function(t,i){function r(e){try{n(s.next(e))}catch(e){i(e)}}function o(e){try{n(s.throw(e))}catch(e){i(e)}}function n(e){var i;e.done?t(e.value):((i=e.value)instanceof d?i:new d(function(e){e(i)})).then(r,o)}n((s=s.apply(e,a||[])).next())})};import{SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";import{GuildModel}from"../Database/GuildSchema.js";import{embedtemp}from"../Config/EmbedConfig.js";const command={Builder:(new SlashCommandBuilder).setName("경고확인").setDescription("사용자의 경고를 확인합니다. (기본: 자기자신)").addUserOption(e=>e.setName("대상").setDescription("경고를 확인할 대상")),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:n=>__awaiter(void 0,void 0,void 0,function*(){var t=n.options.getUser("대상")||n.user;if(n.guild)try{var e=yield GuildModel.findOne({id:n.guild.id});if(e){let i=0;var r=JSON.parse(e.userwarns);for(let e=0;e<r.length;e++)r[e].id===t.id&&(i=r[e].warn);var o=embedtemp.setTitle(`@${t.username}#${t.discriminator}의 경고수`).setDescription(i+"개");n.reply({embeds:[o]})}else n.reply({content:"이 길드는 시덱이 서비스에 등록되어있지 않아요! 관리자에게 요청해보세요!",ephemeral:!0})}catch(e){logger.error(e)}})};export default command;
var __awaiter=this&&this.__awaiter||function(e,a,d,s){return new(d=d||Promise)(function(t,i){function r(e){try{o(s.next(e))}catch(e){i(e)}}function n(e){try{o(s.throw(e))}catch(e){i(e)}}function o(e){var i;e.done?t(e.value):((i=e.value)instanceof d?i:new d(function(e){e(i)})).then(r,n)}o((s=s.apply(e,a||[])).next())})};import{SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";import{embedtemp}from"../Config/EmbedConfig.js";import{GuildModel}from"../Database/GuildSchema.js";const command={Builder:(new SlashCommandBuilder).setName("경고차감").setDescription("사용자의 경고를 차감합니다. (기본량: 1) (기본: 자기자신)").addUserOption(e=>e.setName("유저").setDescription("경고를 차감할 유저").setRequired(!0)).addIntegerOption(e=>e.setName("경고수").setDescription("차감할 경고수")),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:m=>__awaiter(void 0,void 0,void 0,function*(){var e,n=m.options.getUser("유저")||m.user,o=m.options.getInteger("경고수")||1;if(m.guild)if((null==(e=m.member)?void 0:e.permissions).toArray().includes("BanMembers"))try{var a=yield GuildModel.findOne({id:m.guild.id});if(a){var d=JSON.parse(a.userwarns);let i=!1,t=0,r=0;for(let e=0;e<d.length;e++)d[e].id===n.id&&(i=!0,t=d[e].warn,d[e].warn-=d[e].warn>=o?o:d[e].warn,r=d[e].warn);i||d.push({id:n.id,warn:0});var s=JSON.stringify(d),l=(yield GuildModel.updateOne({id:m.guild.id},{userwarns:s}),embedtemp.setTitle("✅ 경고가 제거됨").setDescription(`<@${n.id}>의 경고: ${t||0} -> `+(r||0)));m.reply({embeds:[l]})}else m.reply({content:"이 길드는 시덱이 서비스에 등록되어있지 않아요! 관리자에게 요청해보세요!",ephemeral:!0})}catch(e){logger.error(e)}else m.reply({content:"이 명령어를 실행하려면 멤버 차단하기/추방하기 권한이 필요해요!",ephemeral:!0})})};export default command;
var __awaiter=this&&this.__awaiter||function(e,d,a,s){return new(a=a||Promise)(function(t,i){function r(e){try{o(s.next(e))}catch(e){i(e)}}function n(e){try{o(s.throw(e))}catch(e){i(e)}}function o(e){var i;e.done?t(e.value):((i=e.value)instanceof a?i:new a(function(e){e(i)})).then(r,n)}o((s=s.apply(e,d||[])).next())})};import{SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";import{GuildModel}from"../Database/GuildSchema.js";import{embedtemp}from"../Config/EmbedConfig.js";const command={Builder:(new SlashCommandBuilder).setName("경고초기화").setDescription("사용자의 경고를 초기화합니다 (기본: 자기자신)").addUserOption(e=>e.setName("대상").setDescription("경고를 초기화할 유저")),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:a=>__awaiter(void 0,void 0,void 0,function*(){var e,t=a.options.getUser("대상")||a.user;if(a.guild)if((null==(e=a.member)?void 0:e.permissions).toArray().includes("BanMembers"))try{var r=yield GuildModel.findOne({id:a.guild.id});if(r){var n=JSON.parse(r.userwarns);let i=!1;for(let e=0;e<n.length;e++)n[e].id===t.id&&(i=!0,n[e].warn=0);i||n.push({id:t.id,warn:0});var o=JSON.stringify(n),d=(yield GuildModel.updateOne({id:a.guild.id},{userwarns:o}),embedtemp.setTitle("✅ 경고가 초기화됨").setDescription(`<@${t.id}>의 경고를 초기화함`));a.reply({embeds:[d]})}else a.reply({content:"이 길드는 시덱이 서비스에 등록되어있지 않아요! 관리자에게 요청해보세요!",ephemeral:!0})}catch(e){logger.error(e)}else a.reply({content:"이 명령어를 실행하려면 멤버 차단하기/추방하기 권한이 필요해요!",ephemeral:!0})})};export default command;
var __awaiter=this&&this.__awaiter||function(e,d,s,a){return new(s=s||Promise)(function(t,i){function r(e){try{o(a.next(e))}catch(e){i(e)}}function n(e){try{o(a.throw(e))}catch(e){i(e)}}function o(e){var i;e.done?t(e.value):((i=e.value)instanceof s?i:new s(function(e){e(i)})).then(r,n)}o((a=a.apply(e,d||[])).next())})};import{SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";import{GuildModel}from"../Database/GuildSchema.js";import{embedtemp}from"../Config/EmbedConfig.js";const command={Builder:(new SlashCommandBuilder).setName("경고지정").setDescription("사용자의 경고를 지정합니다. (기본: 자기자신)").addUserOption(e=>e.setName("유저").setDescription("경고를 부여할 유저").setRequired(!0)).addIntegerOption(e=>e.setName("경고수").setDescription("설정할 경고수").setRequired(!0)),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:a=>__awaiter(void 0,void 0,void 0,function*(){var e,t=a.options.getUser("유저"),r=a.options.getInteger("경고수");if(t||a.reply({content:"경고를 부여할 유저를 지정해주세요!",ephemeral:!0}),a.guild)if((null==(e=a.member)?void 0:e.permissions).toArray().includes("BanMembers"))try{var n=yield GuildModel.findOne({id:a.guild.id});if(n){var o=JSON.parse(n.userwarns);let i=!1;for(let e=0;e<o.length;e++)o[e].id===t.id&&(i=!0,o[e].warn=r);i||o.push({id:t.id,warn:r});var d=JSON.stringify(o),s=(yield GuildModel.updateOne({id:a.guild.id},{userwarns:d}),embedtemp.setTitle("✅ 경고가 설정됨").setDescription(`<@${t.id}>의 경고를 ${r||1}로 설정함`));a.reply({embeds:[s]})}else a.reply({content:"이 길드는 시덱이 서비스에 등록되어있지 않아요! 관리자에게 요청해보세요!",ephemeral:!0})}catch(e){logger.error(e)}else a.reply({content:"이 명령어를 실행하려면 멤버 차단하기/추방하기 권한이 필요해요!",ephemeral:!0})})};export default command;
const BotConfig={enableMessageCommand:!1};export default BotConfig;
var __awaiter=this&&this.__awaiter||function(o,a,s,f){return new(s=s||Promise)(function(e,r){function n(o){try{i(f.next(o))}catch(o){r(o)}}function t(o){try{i(f.throw(o))}catch(o){r(o)}}function i(o){var r;o.done?e(o.value):((r=o.value)instanceof s?r:new s(function(o){o(r)})).then(n,t)}i((f=f.apply(o,a||[])).next())})};import BotConfigFile from"./BotConfig.js";class UnvalidBotConfigError extends Error{constructor(o){super(o),this.name="UnvalidBotConfigError",Object.setPrototypeOf(this,UnvalidBotConfigError.prototype)}}class PropertyRequiredError extends UnvalidBotConfigError{constructor(o){super("Property undefined or empty: "+o),this.name="PropertyRequiredError",this.property=o}}const LoadConfig=()=>new Promise((o,r)=>{void 0!==BotConfigFile.enableMessageCommand&&null!==BotConfigFile.enableMessageCommand||r(new PropertyRequiredError("enableMessageCommand")),o(BotConfigFile)});function GetConfig(r){return __awaiter(this,void 0,void 0,function*(){var o=yield LoadConfig();if(1===r)return o.enableMessageCommand})}export{UnvalidBotConfigError,PropertyRequiredError,LoadConfig,GetConfig};
import{EmbedBuilder}from"discord.js";const color="#ffb2d8",url="https://camo.githubusercontent.com/50aa07739a9c9ac136e0ffe79c285cbb482bc435f6e387586d11dfe3a34e4698/68747470733a2f2f63646e2e646973636f72646170702e636f6d2f6174746163686d656e74732f3933383734353536363634373730353639302f3936363436393530323639323930303837342f616239616337616436626531616337332e6a706567",embedtemp=(new EmbedBuilder).setColor(color).setAuthor({name:"시덱이",iconURL:url});export{color,url,embedtemp};
var __awaiter=this&&this.__awaiter||function(e,d,a,u){return new(a=a||Promise)(function(n,t){function o(e){try{l(u.next(e))}catch(e){t(e)}}function i(e){try{l(u.throw(e))}catch(e){t(e)}}function l(e){var t;e.done?n(e.value):((t=e.value)instanceof a?t:new a(function(e){e(t)})).then(o,i)}l((u=u.apply(e,d||[])).next())})};import{GuildModel}from"../Database/GuildSchema.js";import InOutPage from"./InOutPage.js";const BotAutoRoleConfig=(t,e)=>new Promise((d,e)=>__awaiter(void 0,void 0,void 0,function*(){var e;const o=InOutPage;const i=null==(e=t.channel)?void 0:e.createMessageCollector({filter:e=>e.author.id===t.user.id,time:6e4}),l=yield null==(e=t.channel)?void 0:e.send("> 제한시간 60초 안에 자동으로 봇에게 부여할 역할을 멘션해주세요. 입력 취소는 `ㅁ취소`를 입력하세요.");i.on("collect",n=>__awaiter(void 0,void 0,void 0,function*(){var e,t;"ㅁ취소"===n.content?l&&(yield l.delete(),d(o)):n.content.startsWith("<@&")&&(e=n.content.substring(3,n.content.length-1),t=yield null==(t=n.guild)?void 0:t.roles.fetch(e))?(yield GuildModel.updateOne({id:n.guild.id},{botautorole:t.id}),l&&(yield l.delete()),yield n.delete(),yield n.channel.send(`성공적으로 자동으로 봇에게 부여할 역할을 <@&${t.id}>으로 바꿨어요!`),null!==i&&void 0!==i&&i.stop(),d(o)):n.channel.send("입력이 잘못되었어요! 다시 시도해주세요!")}))}));export default BotAutoRoleConfig;
var __awaiter=this&&this.__awaiter||function(e,r,a,d){return new(a=a||Promise)(function(o,t){function n(e){try{l(d.next(e))}catch(e){t(e)}}function i(e){try{l(d.throw(e))}catch(e){t(e)}}function l(e){var t;e.done?o(e.value):((t=e.value)instanceof a?t:new a(function(e){e(t)})).then(n,i)}l((d=d.apply(e,r||[])).next())})};import{ActionRowBuilder,ComponentType,ModalBuilder,TextInputBuilder,TextInputStyle,InteractionCollector,InteractionType}from"discord.js";import InOutPage from"./InOutPage.js";import{client}from"../BotEvent/BotEvent.js";import logger from"../Utils/Logger.js";function parseString(e,t){e.replace(/\${usermention}/,"<@"+t.user.id),e.replace(/\${guildname}/,""+(null==(e=t.guild)?void 0:e.name))}const InMsgConfig=(a,d)=>new Promise((r,e)=>__awaiter(void 0,void 0,void 0,function*(){const i=InOutPage;var e=(new ModalBuilder).setCustomId("cmodal."+d).setTitle("입장 메시지 설정"),t=(new TextInputBuilder).setCustomId(`cmodal.${d}.title`).setLabel("제목").setStyle(TextInputStyle.Short),o=(new TextInputBuilder).setCustomId(`cmodal.${d}.desc`).setLabel("설명").setStyle(TextInputStyle.Paragraph),t=(new ActionRowBuilder).addComponents(t),o=(new ActionRowBuilder).addComponents(o);e.addComponents(t,o),a.showModal(e);const l=new InteractionCollector(client,{guild:a.guild,interactionType:InteractionType.ModalSubmit});l.filter=e=>e.user.id===a.user.id,l.on("collect",e=>{if(e.customId==="cmodal."+d){var t=e.fields.getTextInputValue(`cmodal.${d}.title`),o=e.fields.getTextInputValue(`cmodal.${d}.desc`);logger.info(`modal title:${t}, desc: `+o),e.reply(`modal title:${t}, desc: `+o),l.stop();const n=`cdec.${d}.config.`;a.channel.createMessageComponentCollector({filter:e=>e.customId.startsWith(n)&&e.user.id===a.user.id,componentType:ComponentType.Button});r(i)}})}));export default InMsgConfig;
var __awaiter=this&&this.__awaiter||function(e,u,d,r){return new(d=d||Promise)(function(o,t){function n(e){try{l(r.next(e))}catch(e){t(e)}}function i(e){try{l(r.throw(e))}catch(e){t(e)}}function l(e){var t;e.done?o(e.value):((t=e.value)instanceof d?t:new d(function(e){e(t)})).then(n,i)}l((r=r.apply(e,u||[])).next())})};import{EmbedBuilder,ActionRowBuilder,ButtonBuilder,ButtonStyle}from"discord.js";import{color,url}from"../Config/EmbedConfig.js";import{GuildModel}from"../Database/GuildSchema.js";const InOutPage=(u,d)=>__awaiter(void 0,void 0,void 0,function*(){var e,t=yield GuildModel.findOne({id:u.guild.id}),o=null==t?void 0:t.userautorole,n=null==t?void 0:t.botautorole;let i,l;return o&&(i=yield null==(e=u.guild)?void 0:e.roles.fetch(o)),n&&(l=yield null==(e=u.guild)?void 0:e.roles.fetch(n)),{name:"inout",embed:(new EmbedBuilder).setColor(color).setAuthor({name:"시덱이",iconURL:url}).setTitle("입/퇴장 설정").setDescription("입/퇴장 관련 설정 목록입니다.").addFields({name:"유저 자동 역할",value:i?`<@&${null===i||void 0===i?void 0:i.id}>`:"미정"},{name:"봇 자동 역할",value:l?`<@&${null===l||void 0===l?void 0:l.id}>`:"미정"},{name:"입장 메세지",value:(null==t?void 0:t.inmsg)||"미정"},{name:"퇴장 메세지",value:(null==t?void 0:t.outmsg)||"미정"}),components:[(new ActionRowBuilder).addComponents((new ButtonBuilder).setLabel("유저 자동 역할 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${d}.config.execute.userroleconfig`),(new ButtonBuilder).setLabel("봇 자동 역할 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${d}.config.execute.botroleconfig`),(new ButtonBuilder).setLabel("입장 메세지 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${d}.config.execute.inmsgconfig`),(new ButtonBuilder).setLabel("퇴장 메세지 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${d}.config.execute.outmsgconfig`)),(new ActionRowBuilder).addComponents((new ButtonBuilder).setLabel("뒤로가기").setStyle(ButtonStyle.Danger).setCustomId(`cdec.${d}.config.main`))]}});export default InOutPage;
var __awaiter=this&&this.__awaiter||function(e,r,a,l){return new(a=a||Promise)(function(n,t){function o(e){try{u(l.next(e))}catch(e){t(e)}}function i(e){try{u(l.throw(e))}catch(e){t(e)}}function u(e){var t;e.done?n(e.value):((t=e.value)instanceof a?t:new a(function(e){e(t)})).then(o,i)}u((l=l.apply(e,r||[])).next())})};import{EmbedBuilder,ActionRowBuilder,ButtonBuilder,ButtonStyle}from"discord.js";import{color,url}from"../Config/EmbedConfig.js";const MainPage=(e,t)=>__awaiter(void 0,void 0,void 0,function*(){return{name:"main",embed:(new EmbedBuilder).setColor(color).setAuthor({name:"시덱이",iconURL:url}).setTitle(e.guild.name+"의 서버 설정").setDescription("바꾸고 싶은 설정 창을 열어주세요.").addFields({name:"일반 설정",value:"기본적인 관리 설정"},{name:"입/퇴장 설정",value:"입/퇴장 메세지 설정"},{name:"경고 설정",value:"경고 관련 설정"},{name:"공지 설정",value:"공지 관련 설정"},{name:"레벨링 설정",value:"레벨링 시스템 설정"},{name:"티켓 설정",value:"티켓 관련 설정"},{name:"멤버 설정",value:"멤버 관리 설정"}),components:[(new ActionRowBuilder).addComponents((new ButtonBuilder).setLabel("일반 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.ordinary`),(new ButtonBuilder).setLabel("입/퇴장 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.inout`),(new ButtonBuilder).setLabel("경고 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.warn`),(new ButtonBuilder).setLabel("공지 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.notice`),(new ButtonBuilder).setLabel("레벨링 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.level`)),(new ActionRowBuilder).addComponents((new ButtonBuilder).setLabel("티켓 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.ticket`),(new ButtonBuilder).setLabel("멤버 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${t}.config.member`))]}});export default MainPage;
var __awaiter=this&&this.__awaiter||function(e,d,a,r){return new(a=a||Promise)(function(t,n){function i(e){try{l(r.next(e))}catch(e){n(e)}}function o(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var n;e.done?t(e.value):((n=e.value)instanceof a?n:new a(function(e){e(n)})).then(i,o)}l((r=r.apply(e,d||[])).next())})};import{EmbedBuilder,ActionRowBuilder,ButtonBuilder,ButtonStyle,ChannelType}from"discord.js";import{color,url}from"../Config/EmbedConfig.js";import{GuildModel}from"../Database/GuildSchema.js";const OrdinaryPage=(n,i)=>__awaiter(void 0,void 0,void 0,function*(){var e=yield GuildModel.findOne({id:n.guild.id});let t=null==e?void 0:e.sysnoticechannel;return null!=e&&e.sysnoticechannel?n.guild.channels.fetch(null==e?void 0:e.sysnoticechannel).then(e=>{e?t=e.id:n.guild.channels.fetch().then(e=>{if(0!==e.size){let n=!1;e.forEach(e=>{n||e.type===ChannelType.GuildText&&(n=!0,t=e.id)})}})}):n.guild.channels.fetch().then(e=>{if(0!==e.size){let n=!1;e.forEach(e=>{n||e.type===ChannelType.GuildText&&(n=!0,t=e.id)})}}),{name:"ordinary",embed:(new EmbedBuilder).setColor(color).setAuthor({name:"시덱이",iconURL:url}).setTitle("일반 설정").setDescription("일반적인 설정 목록입니다.").addFields({name:"시스템 메세지 공지 채널",value:t?`<#${t}>`:"미정"}),components:[(new ActionRowBuilder).addComponents((new ButtonBuilder).setLabel("시스템 공지 채널 설정").setStyle(ButtonStyle.Primary).setCustomId(`cdec.${i}.config.execute.syschconfig`)),(new ActionRowBuilder).addComponents((new ButtonBuilder).setLabel("뒤로가기").setStyle(ButtonStyle.Danger).setCustomId(`cdec.${i}.config.main`))]}});export default OrdinaryPage;
var __awaiter=this&&this.__awaiter||function(n,c,r,u){return new(r=r||Promise)(function(i,t){function o(n){try{a(u.next(n))}catch(n){t(n)}}function e(n){try{a(u.throw(n))}catch(n){t(n)}}function a(n){var t;n.done?i(n.value):((t=n.value)instanceof r?t:new r(function(n){n(t)})).then(o,e)}a((u=u.apply(n,c||[])).next())})};const OutMsgConfig=(n,t)=>new Promise((n,t)=>__awaiter(void 0,void 0,void 0,function*(){}));export default OutMsgConfig;
var __awaiter=this&&this.__awaiter||function(e,d,a,r){return new(a=a||Promise)(function(t,n){function i(e){try{l(r.next(e))}catch(e){n(e)}}function o(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var n;e.done?t(e.value):((n=e.value)instanceof a?n:new a(function(e){e(n)})).then(i,o)}l((r=r.apply(e,d||[])).next())})};import{ChannelType}from"discord.js";import{GuildModel}from"../Database/GuildSchema.js";import OrdinaryPage from"./OrdinaryPage.js";const SysChConfig=(n,e)=>new Promise((d,e)=>__awaiter(void 0,void 0,void 0,function*(){var e;const i=OrdinaryPage;const o=null==(e=n.channel)?void 0:e.createMessageCollector({filter:e=>e.author.id===n.user.id,time:6e4}),l=yield null==(e=n.channel)?void 0:e.send("> 제한시간 60초 안에 시스템 공지 채널로 설정할 채널을 멘션해주세요. 입력 취소는 `ㅁ취소`를 입력하세요.");o.on("collect",t=>__awaiter(void 0,void 0,void 0,function*(){var e,n;"ㅁ취소"===t.content?l&&(yield l.delete(),d(i)):t.content.startsWith("<#")&&(e=t.content.substring(2,t.content.length-1),n=yield null==(n=t.guild)?void 0:n.channels.fetch(e))?(null==n?void 0:n.type)!==ChannelType.GuildText?t.channel.send("텍스트 채널을 선택해주세요! 다시 시도해주세요!"):(yield GuildModel.updateOne({id:t.guild.id},{sysnoticechannel:e}),l&&(yield l.delete()),yield t.channel.send(`성공적으로 시스템 메세지 공지 채널을 <#${n.id}>으로 바꿨어요!`),null!==o&&void 0!==o&&o.stop(),d(i)):t.channel.send("입력이 잘못되었어요! 다시 시도해주세요!")}))}));export default SysChConfig;
var __awaiter=this&&this.__awaiter||function(e,d,a,r){return new(a=a||Promise)(function(t,n){function i(e){try{l(r.next(e))}catch(e){n(e)}}function o(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var n;e.done?t(e.value):((n=e.value)instanceof a?n:new a(function(e){e(n)})).then(i,o)}l((r=r.apply(e,d||[])).next())})};import{GuildModel}from"../Database/GuildSchema.js";import InOutPage from"./InOutPage.js";const InOutUserRoleConfig=(n,e)=>new Promise((d,e)=>__awaiter(void 0,void 0,void 0,function*(){var e;const i=InOutPage;const o=null==(e=n.channel)?void 0:e.createMessageCollector({filter:e=>e.author.id===n.user.id,time:6e4}),l=yield null==(e=n.channel)?void 0:e.send("> 제한시간 60초 안에 자동으로 유저에게 부여할 역할을 멘션해주세요. 입력 취소는 `ㅁ취소`를 입력하세요.");o.on("collect",t=>__awaiter(void 0,void 0,void 0,function*(){var e,n;"ㅁ취소"===t.content?l&&(yield l.delete(),d(i)):t.content.startsWith("<@&")&&(e=t.content.substring(3,t.content.length-1),n=yield null==(n=t.guild)?void 0:n.roles.fetch(e))?(yield GuildModel.updateOne({id:t.guild.id},{userautorole:n.id}),l&&(yield l.delete()),yield t.delete(),yield t.channel.send(`성공적으로 자동으로 유저에게 부여할 역할을 <@&${n.id}>으로 바꿨어요!`),null!==o&&void 0!==o&&o.stop(),d(i)):t.channel.send("입력이 잘못되었어요! 다시 시도해주세요!")}))}));export default InOutUserRoleConfig;
var __awaiter=this&&this.__awaiter||function(n,r,a,s){return new(a=a||Promise)(function(t,o){function e(n){try{i(s.next(n))}catch(n){o(n)}}function c(n){try{i(s.throw(n))}catch(n){o(n)}}function i(n){var o;n.done?t(n.value):((o=n.value)instanceof a?o:new a(function(n){n(o)})).then(e,c)}i((s=s.apply(n,r||[])).next())})};import mongoose from"mongoose";const Connect=()=>new Promise((n,o)=>__awaiter(void 0,void 0,void 0,function*(){mongoose.connect(process.env.DBURL).then(()=>n()).catch(n=>o(n))}));export{Connect};
var __decorate=this&&this.__decorate||function(e,t,o,a){var d,r=arguments.length,i=r<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,o):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,o,a);else for(var p=e.length-1;0<=p;p--)(d=e[p])&&(i=(r<3?d(i):3<r?d(t,o,i):d(t,o))||i);return 3<r&&i&&Object.defineProperty(t,o,i),i},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};import typegoose from"@typegoose/typegoose";import{TicketClass}from"./TicketSchema.js";const{prop,getModelForClass}=typegoose;class GuildClass{}__decorate([prop({required:!0,unique:!0}),__metadata("design:type",String)],GuildClass.prototype,"id",void 0),__decorate([prop({required:!0,default:0}),__metadata("design:type",Number)],GuildClass.prototype,"warnlimit",void 0),__decorate([prop({required:!0,default:"[]"}),__metadata("design:type",String)],GuildClass.prototype,"userwarns",void 0),__decorate([prop({required:!0,default:"[]"}),__metadata("design:type",String)],GuildClass.prototype,"customdetection",void 0),__decorate([prop(),__metadata("design:type",String)],GuildClass.prototype,"sysnoticechannel",void 0),__decorate([prop(),__metadata("design:type",String)],GuildClass.prototype,"noticechannel",void 0),__decorate([prop(),__metadata("design:type",String)],GuildClass.prototype,"greetmsg",void 0),__decorate([prop(),__metadata("design:type",String)],GuildClass.prototype,"exitmsg",void 0),__decorate([prop({ref:()=>TicketClass}),__metadata("design:type",Object)],GuildClass.prototype,"ticketlist",void 0),__decorate([prop(),__metadata("design:type",Map)],GuildClass.prototype,"userlevels",void 0),__decorate([prop(),__metadata("design:type",String)],GuildClass.prototype,"inmsg",void 0),__decorate([prop(),__metadata("design:type",String)],GuildClass.prototype,"outmsg",void 0),__decorate([prop(),__metadata("design:type",String)],GuildClass.prototype,"userautorole",void 0),__decorate([prop(),__metadata("design:type",String)],GuildClass.prototype,"botautorole",void 0);const GuildModel=getModelForClass(GuildClass);export{GuildClass,GuildModel};
var __awaiter=this&&this.__awaiter||function(e,i,s,l){return new(s=s||Promise)(function(o,n){function t(e){try{c(l.next(e))}catch(e){n(e)}}function r(e){try{c(l.throw(e))}catch(e){n(e)}}function c(e){var n;e.done?o(e.value):((n=e.value)instanceof s?n:new s(function(e){e(n)})).then(t,r)}c((l=l.apply(e,i||[])).next())})};import pg from"pg";import logger from"../Utils/Logger.js";const{Pool,Client}=pg,Connect=()=>new Promise((o,e)=>__awaiter(void 0,void 0,void 0,function*(){var e;try{var n={connectionString:null==(e=process.env.DATABASE_URL)?void 0:e.replace("postgres","postgresql").concat("","?sslmode=require"),ssl:{rejectUnauthorized:!1}};new Client(n).connect(e=>{e?logger.error("Error Connecting: "+e.stack):(logger.info("Client connected"),o(!0))})}catch(e){}}));function getPool(){var e={connectionString:null==(e=process.env.DATABASE_URL)?void 0:e.replace("postgres","postgresql").concat("","?sslmode=require"),ssl:{rejectUnauthorized:!0}};return new Pool(e)}export{Connect,getPool};
var __decorate=this&&this.__decorate||function(e,t,o,r){var a,i=arguments.length,p=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)p=Reflect.decorate(e,t,o,r);else for(var s=e.length-1;0<=s;s--)(a=e[s])&&(p=(i<3?a(p):3<i?a(t,o,p):a(t,o))||p);return 3<i&&p&&Object.defineProperty(t,o,p),p},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};import typegoose from"@typegoose/typegoose";const{prop,getModelForClass}=typegoose;class TicketClass{}__decorate([prop({required:!0}),__metadata("design:type",String)],TicketClass.prototype,"category",void 0),__decorate([prop({required:!0}),__metadata("design:type",String)],TicketClass.prototype,"title",void 0),__decorate([prop(),__metadata("design:type",String)],TicketClass.prototype,"description",void 0),__decorate([prop(),__metadata("design:type",String)],TicketClass.prototype,"buttontitle",void 0),__decorate([prop({required:!0}),__metadata("design:type",String)],TicketClass.prototype,"targetid",void 0),__decorate([prop({required:!0}),__metadata("design:type",String)],TicketClass.prototype,"shownroles",void 0);const TicketModel=getModelForClass(TicketClass);export{TicketClass,TicketModel};
var __decorate=this&&this.__decorate||function(e,t,o,r){var s,a=arguments.length,c=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,o,r);else for(var l=e.length-1;0<=l;l--)(s=e[l])&&(c=(a<3?s(c):3<a?s(t,o,c):s(t,o))||c);return 3<a&&c&&Object.defineProperty(t,o,c),c},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};import typegoose from"@typegoose/typegoose";const{prop,getModelForClass}=typegoose;class UserClass{}__decorate([prop({required:!0,unique:!0}),__metadata("design:type",String)],UserClass.prototype,"id",void 0);const UserModel=getModelForClass(UserClass);export{UserClass,UserModel};
var __decorate=this&&this.__decorate||function(e,t,o,r){var a,d=arguments.length,p=d<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)p=Reflect.decorate(e,t,o,r);else for(var s=e.length-1;0<=s;s--)(a=e[s])&&(p=(d<3?a(p):3<d?a(t,o,p):a(t,o))||p);return 3<d&&p&&Object.defineProperty(t,o,p),p},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};import typegoose from"@typegoose/typegoose";const{prop,getModelForClass}=typegoose;class VoteClass{}__decorate([prop({required:!0}),__metadata("design:type",String)],VoteClass.prototype,"id",void 0),__decorate([prop({required:!0}),__metadata("design:type",String)],VoteClass.prototype,"topic",void 0),__decorate([prop({required:!0}),__metadata("design:type",String)],VoteClass.prototype,"msgid",void 0),__decorate([prop(),__metadata("design:type",String)],VoteClass.prototype,"description",void 0),__decorate([prop({required:!0,default:0}),__metadata("design:type",Number)],VoteClass.prototype,"agree",void 0),__decorate([prop({required:!0,default:0}),__metadata("design:type",Number)],VoteClass.prototype,"disagree",void 0),__decorate([prop({required:!0}),__metadata("design:type",Map)],VoteClass.prototype,"uservoted",void 0),__decorate([prop({required:!0}),__metadata("design:type",String)],VoteClass.prototype,"maker",void 0),__decorate([prop({required:!0}),__metadata("design:type",String)],VoteClass.prototype,"makername",void 0);const VoteModel=getModelForClass(VoteClass);export{VoteClass,VoteModel};
export default function parse(e,t){}
const imsibangpyeon=1;export{imsibangpyeon};
"use strict";



"use strict";
var __awaiter=this&&this.__awaiter||function(e,r,c,u){return new(c=c||Promise)(function(o,t){function n(e){try{a(u.next(e))}catch(e){t(e)}}function i(e){try{a(u.throw(e))}catch(e){t(e)}}function a(e){var t;e.done?o(e.value):((t=e.value)instanceof c?t:new c(function(e){e(t)})).then(n,i)}a((u=u.apply(e,r||[])).next())})};import{SlashCommandBuilder}from"discord.js";import logger from"../Utils/Logger.js";const command={Builder:(new SlashCommandBuilder).setName("Template").setDescription("Template"),MsgExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("MsgExecute")}),SlashExecute:e=>__awaiter(void 0,void 0,void 0,function*(){logger.info("SlashExecute")})};export default command;
import dotenv from"dotenv";export default function Init(){dotenv.config()}
import winston from"winston";import winstonDaily from"winston-daily-rotate-file";const logDir="logs",{combine,timestamp,printf}=winston.format,logFormat=printf(o=>`${o.timestamp} ${o.level}: `+o.message),logger=winston.createLogger({format:combine(timestamp({format:"YYYY-MM-DD HH:mm:ss"}),logFormat),transports:[new winstonDaily({level:"info",datePattern:"YYYY-MM-DD",dirname:logDir,filename:"%DATE%.log",maxFiles:30,zippedArchive:!0}),new winstonDaily({level:"error",datePattern:"YYYY-MM-DD",dirname:logDir+"/error",filename:"%DATE%.error.log",maxFiles:30,zippedArchive:!0})]});logger.add(new winston.transports.Console({format:winston.format.combine(winston.format.colorize(),winston.format.simple())}));export default logger;